Description: replace ava by tape
Author: Xavier Guimard <yadd@debian.org>
Forwarded: not-needed
Last-Update: 2020-10-25

--- a/test/globule.js
+++ b/test/globule.js
@@ -1,6 +1,6 @@
 // Tests from [globule](https://github.com/cowboy/node-globule)
-import test from 'ava';
-import multimatch from '..';
+const test = require('tape');
+const multimatch = require('..');
 
 test('Should return empty set if a required argument is missing or an empty set.', t => {
 	t.deepEqual(multimatch('', 'foo.js'), []);
@@ -9,6 +9,7 @@
 	t.deepEqual(multimatch('*.js', []), []);
 	t.deepEqual(multimatch('', ['foo.js']), []);
 	t.deepEqual(multimatch(['*.js'], ''), []);
+    t.end();
 });
 
 test('basic matching should match correctly', t => {
@@ -18,39 +19,48 @@
 	t.deepEqual(multimatch('foo.js', ['*.js', '*.css']), ['foo.js']);
 	t.deepEqual(multimatch(['foo.js'], ['*.js', '*.css']), ['foo.js']);
 	t.deepEqual(multimatch(['foo.js', 'bar.css'], ['*.js', '*.css']), ['foo.js', 'bar.css']);
+    t.end();
 });
 
 test('should fail to match', t => {
 	t.deepEqual(multimatch('foo.css', '*.js'), []);
 	t.deepEqual(multimatch(['foo.css', 'bar.css'], '*.js'), []);
+    t.end();
 });
 
 test('should return a uniqued set', t => {
 	t.deepEqual(multimatch(['foo.js', 'foo.js'], '*.js'), ['foo.js']);
 	t.deepEqual(multimatch(['foo.js', 'foo.js'], ['*.js', '*.*']), ['foo.js']);
+    t.end();
 });
 
 test('solitary exclusion should match nothing', t => {
 	t.deepEqual(multimatch(['foo.js', 'bar.js'], ['!*.js']), []);
+    t.end();
 });
 
 test('exclusion should cancel match', t => {
 	t.deepEqual(multimatch(['foo.js', 'bar.js'], ['*.js', '!*.js']), []);
+    t.end();
 });
 
 test('partial exclusion should partially cancel match', t => {
 	t.deepEqual(multimatch(['foo.js', 'bar.js', 'baz.js'], ['*.js', '!f*.js']), ['bar.js', 'baz.js']);
+    t.end();
 });
 
 test('inclusion / exclusion order matters', t => {
 	t.deepEqual(multimatch(['foo.js', 'bar.js', 'baz.js'], ['*.js', '!*.js', 'b*.js']), ['bar.js', 'baz.js']);
 	t.deepEqual(multimatch(['foo.js', 'bar.js', 'baz.js'], ['*.js', '!f*.js', '*.js']), ['foo.js', 'bar.js', 'baz.js']);
+    t.end();
 });
 
 test('should matchBase (minimatch) when specified.', t => {
 	t.deepEqual(multimatch(['foo.js', 'bar', 'baz/xyz.js'], '*.js', {matchBase: true}), ['foo.js', 'baz/xyz.js']);
+    t.end();
 });
 
 test('should not matchBase (minimatch) by default.', t => {
 	t.deepEqual(multimatch(['foo.js', 'bar', 'baz/xyz.js'], '*.js'), ['foo.js']);
+    t.end();
 });
--- a/test/test.js
+++ b/test/test.js
@@ -1,5 +1,5 @@
-import test from 'ava';
-import multimatch from '..';
+const test = require('tape');
+const multimatch = require('..');
 
 const fixtures = ['vendor/js/foo.js', 'vendor/js/bar.js', 'vendor/js/baz.js'];
 
@@ -12,6 +12,7 @@
 	t.deepEqual(multimatch(['foo', 'bar', 'baz'], ['!foo', 'bar']), ['bar']);
 	t.deepEqual(multimatch(['foo', 'bar', 'baz'], ['!foo', '!bar']), []);
 	t.deepEqual(multimatch(['foo', 'bar', 'baz'], ['!*{o,r}', 'foo']), ['foo']);
+    t.end();
 });
 
 test('return an array of matches', t => {
@@ -19,6 +20,7 @@
 	t.deepEqual(multimatch(['foo', 'bar', 'baz'], ['f*']), ['foo']);
 	t.deepEqual(multimatch(['foo', 'bar', 'baz'], ['f*', 'bar']), ['foo', 'bar']);
 	t.deepEqual(multimatch(['foo', 'bar', 'baz'], ['foo', 'bar']), ['foo', 'bar']);
+    t.end();
 });
 
 test('return matches in the order the list were defined', t => {
@@ -27,6 +29,7 @@
 	t.deepEqual(multimatch(['foo', 'bar', 'baz'], ['*z', 'f*']), ['foo', 'baz']);
 	t.deepEqual(multimatch(['foo', 'bar', 'baz'], ['!*z', '*r', 'f*']), ['foo', 'bar']);
 	t.deepEqual(multimatch(['foo', 'bar', 'baz'], ['*a*', '!f*']), ['bar', 'baz']);
+    t.end();
 });
 
 test('return an array with negations omitted', t => {
@@ -39,11 +42,13 @@
 	t.deepEqual(multimatch(fixtures, ['!**/*z.js']), []);
 	t.deepEqual(multimatch(fixtures, ['!**/*z.js', '**/foo.js']), ['vendor/js/foo.js']);
 	t.deepEqual(multimatch(fixtures, ['!**/*z.js', '!**/*a*.js']), []);
+    t.end();
 });
 
 test('return an empty array when no matches are found', t => {
 	t.deepEqual(multimatch(['foo', 'bar', 'baz'], ['quux']), []);
 	t.deepEqual(multimatch(fixtures, ['!**/*.js']), []);
+    t.end();
 });
 
 test('patterns be order sensitive', t => {
@@ -57,6 +62,7 @@
 	t.deepEqual(multimatch(['foo', 'bar', 'baz'], ['foo', '!bar']), ['foo']);
 	t.deepEqual(multimatch(['foo', 'bar', 'baz'], ['bar', '!foo', 'foo']), ['foo', 'bar']);
 	t.deepEqual(multimatch(['foo', 'bar', 'baz'], ['foo', '!foo', 'bar']), ['bar']);
+    t.end();
 });
 
 test('override negations and re-include explicitly defined patterns', t => {
@@ -66,6 +72,7 @@
 	t.deepEqual(multimatch(['foo', 'bar', 'baz'], ['!*a*', 'bar']), ['bar']);
 	t.deepEqual(multimatch(['foo', 'bar', 'baz'], ['!*a*', '*']), ['foo', 'bar', 'baz']);
 	t.deepEqual(multimatch(['foo', 'bar', 'baz'], ['!*a*', '*z']), ['baz']);
+    t.end();
 });
 
 test('misc', t => {
@@ -92,4 +99,5 @@
 	t.deepEqual(multimatch(['foo', 'bar', 'baz'], ['!foo', '!bar']), []);
 	t.deepEqual(multimatch(['foo', 'one', 'two', 'four', 'do', 'once', 'only'], ['once', '!o*', 'once']), ['once']);
 	t.deepEqual(multimatch(['foo', 'one', 'two', 'four', 'do', 'once', 'only'], ['*', '!o*', 'once']), ['foo', 'two', 'four', 'do', 'once']);
+    t.end();
 });
